version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile.backend
    container_name: boardcraft-backend
    volumes:
      - ..:/workspaces:cached
      - backend-target:/workspaces/${localWorkspaceFolderBasename}/target
      - cargo-cache:/usr/local/cargo/registry
      - ~/.gitconfig:/home/vscode/.gitconfig:ro
    working_dir: /workspaces/${localWorkspaceFolderBasename}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      surrealdb:
        condition: service_started
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres
      - SURREALDB_URL=ws://surrealdb:8000/rpc
    user: vscode
    init: true
    command: sleep infinity

  frontend:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile.frontend
    container_name: boardcraft-frontend
    volumes:
      - ..:/workspaces:cached
      - frontend-node-modules:/workspaces/${localWorkspaceFolderBasename}/frontend/node_modules
    working_dir: /workspaces/${localWorkspaceFolderBasename}/frontend
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:3000
    user: node
    init: true
    command: sleep infinity

  postgres:
    image: postgres:15
    container_name: boardcraft-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  surrealdb:
    image: surrealdb/surrealdb:latest
    container_name: boardcraft-surrealdb
    ports:
      - "8000:8000"
    volumes:
      - surrealdb_data:/data
    command: start --user root --pass root --auth --bind 0.0.0.0:8000 file:/data/database.db

volumes:
  postgres_data:
  surrealdb_data:
  cargo-cache:
  backend-target:
  frontend-node-modules: 